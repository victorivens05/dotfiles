{
  // Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  //  "prefix": "log",
  //  "body": [
  //    "console.log('$1');",
  //    "$2"
  //  ],
  //  "description": "Log output to console"
  // }
  "Create React Container (hooks and context api)": {
    "prefix": "rclass",
    "body": [
      "import React, { useState } from 'react'",
      "import { $1View } from './$1View'",
      "import { GlobalStoreValues, GlobalStoreCtx } from '../../GlobalStore'",
      "",
      "const use$1Store = () => {",
      "  const { setErrorMessage } = useContext<GlobalStoreValues>(GlobalStoreCtx)",
      "",
      "  return {}",
      "}",
      "",
      "export type $1StoreValues = ReturnType<typeof use$1Store>",
      "export const $1StoreCtx = React.createContext(null)",
      "export const $1 = () => {",
      "  const Values = use$1Store()",
      "  return (",
      "    <$1StoreCtx.Provider value={Values}>",
      "      <$1View />",
      "    </$1StoreCtx.Provider>",
      "  )",
      "",
      "}",
    ]
  },
  "Create React View (hooks and context api)": {
    "prefix": "rview",
    "body": [
      "import React, {useContext} from 'react'",
      "import { $1StoreValues, $1StoreCtx } from './$1';",
      "",
      "export const $1View = () => {",
      "",
      "  const { } = useContext<$1StoreValues>($1StoreCtx)",
      "",
      "  return (",
      "    <div>",
      "    </div>",
      "  )",
      "}",
    ]
  },
  "Use State": {
    "prefix": "ust",
    "body": "const [$1, _se$2t$1] = useState($3)"
  },
  "Create New Reducer": {
    "prefix": "reduc",
    "body": [
      "$1(state: IState, { payload }: PayloadAction<{ $2 }>) {",
      "  $3",
      "},",
    ]
  },
  "New Action with useReducer": {
    "prefix": "act",
    "body": [
      "$1:'$1';",
      "case ACTIONS.$1:",
      "  return {",
      "    ...state,",
      "  }"
    ]
  }
}
