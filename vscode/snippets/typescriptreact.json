{
  // Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  //  "prefix": "log",
  //  "body": [
  //    "console.log('$1');",
  //    "$2"
  //  ],
  //  "description": "Log output to console"
  // }
  "Use State": {
    "prefix": "ust",
    "body": "const [$1, _se$2t$1] = useState($3)"
  },
  // "Create New Reducer": {
  //   "prefix": "reduc",
  //   "body": [
  //     "$1(state: IState, { payload }: PayloadAction<{ $2 }>) {",
  //     "  $3",
  //     "},",
  //   ]
  // },
  // "New Action with useReducer": {
  //   "prefix": "act",
  //   "body": [
  //     "$1:'$1';",
  //     "case ACTIONS.$1:",
  //     "  return {",
  //     "    ...state,",
  //     "  }"
  //   ]
  // },
  "New Action And Reducer with useReducer": {
    "prefix": "actred",
    "body": [
      "| { type: '$1', $2 }",
      "case '$1':",
      "  return {",
      "    ...state,",
      "    $2: action.$2,",
      "  }"
    ]
  },
  "Dispatch with useReducer": {
    "prefix": "disp",
    "body": "dispatch({ type: '$1' })"
  },
  "New Store": {
    "prefix": "newstore",
    "body": [
      "import React, { useEffect } from 'react'",
      "",
      "const initialState = {",
      "}",
      "",
      "type ACTIONS =",
      "  | { type: '' }",
      "",
      "type IState = typeof initialState",
      "type IDispatch = (p: ACTIONS) => void",
      "",
      "function reducerFn (state: IState, action: ACTIONS): IState {",
      "",
      "  switch (action.type) {",
      "    case '':",
      "      return {",
      "        ...initialState,",
      "      }",
      "    default:",
      "      return state",
      "  }",
      "}",
      "",
      "/** Funtions */",
      "",
      "/** Providers */",
      "const StateContext = React.createContext(initialState)",
      "const DispatchContext = React.createContext<IDispatch>(undefined as any)",
      "",
      "function $1Provider ({ children }) {",
      "  const [state, dispatch] = React.useReducer(reducerFn, initialState)",
      "",
      "  useEffect(() => {",
      "    // console.log({ state })",
      "  }, [state])",
      "",
      "  return (",
      "    <DispatchContext.Provider value={dispatch}>",
      "      <StateContext.Provider value={state}>",
      "        {children}",
      "      </StateContext.Provider>",
      "    </DispatchContext.Provider>",
      "  )",
      "}",
      "",
      "function use$1State () {",
      "  const context = React.useContext(StateContext)",
      "  if (context === undefined) {",
      "    throw new Error('use$1State must be used within a $1Provider')",
      "  }",
      "  return context",
      "}",
      "",
      "function use$1Dispatch () {",
      "  const context = React.useContext(DispatchContext)",
      "  if (context === undefined) {",
      "    throw new Error('use$1Dispatch must be used within a $1Provider')",
      "  }",
      "  return context",
      "}",
      "",
      "const Get$1State  = ({ children = (s: typeof state) => null as any }) => {",
      "  const state = use$1State()",
      "  return children(state)",
      "}",
      "",
      "export {",
      "  $1Provider,",
      "  Get$1State,",
      "  use$1Dispatch,",
      "  use$1State,",
      "}"
    ]
  },
  "New Styled Element": {
    "prefix": "styl",
    "body": ["$1: styled('div')`", "  $2", "`,"]
  },
  "Css Media": {
    "prefix": "@m",
    "body": ["@media (max-width: $1px) {", "  $2", "}"]
  }
}
